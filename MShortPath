import numpy as np
from scipy.optimize import linprog
from basic_utils import nn2na, get_usage_string, get_min_cut, get_selected_arcs

# IMPORT THE DATA:
NN = np.array([[0, 1, 1, 0, 0, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]])

# DATA MANIPULATION:
Aeq, arc_idxs = nn2na(NN)
C = np.array([2, 2, 2, 5,2, 1, 2])
beq = np.array([1, 0, 0, 0, 0, -1])

bounds = tuple([(0, None) for arcs in range(0, Aeq.shape[1])])

print('## Optimizer inputs ## \n'
      'Cost vector: %s \n '
      'A_eq Node-Arc matrix:\n%s \n'
      'b_eq demand-supply vector: %s \n'
      'Bounds of each X arc variable: %s \n' % (C, Aeq, beq, bounds))

# OPTIMIZE:
res = linprog(C, A_eq=Aeq, b_eq=beq, bounds=bounds )

# GET THE SOLUTION:
selarcs = get_selected_arcs(arc_idxs,res.x )

print('## Results ## ')
print ('The row solution  will be : %s ' % res.x)
print ('The arcs that make the shortest path will be (from , to ) : %s ' % selarcs)
print ('The maximum cost will be : %0.2f ' % res.fun )
